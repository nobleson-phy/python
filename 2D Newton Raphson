#2D - Newton Raphson method
import math

def f(x, y):
    function = y + x**2 - x - 0.75 #define first polynomial
    return function

def g(x, y):
    function = y + 5*x*y - x**2 #define second polynomial
    return function

def newton_raphson_2D(x, y):
    h = 0.001
    a = (f((x + h), y) - f(x, y)) / h #Partial derivate of the first polynomial w.r.t. x
    b = (f(x, (y + h)) - f(x, y)) / h #Partial derivate of the first polynomial w.r.t. y
    c = (g((x + h), y) - g(x, y)) / h #Partial derivate of the second polynomial w.r.t. x
    d = (g(x, (y + h)) - g(x, y)) / h #Partial derivate of the second polynomial w.r.t. y
    
    m = f(x, y)
    n = g(x, y)
    
    j = ((a*d) - (b*c)) #This is the Jacobian of the system {df/dx*dg/dy - df/dy*dg/dx}
    
    o = x - (((m*d)- (n*b)) / j) #Solution from Newton Raphson method for x
    p = y - (((n*a)- (m*c)) / j) #Solution from Newton Raphson method for y
    
    return o, p

def compute (r, s, iterr):  # r and s = the initial point i.e. a value closer to the root, 
    count = 1  # iterr = number of iterations
    print("   x" "  \t" "  y")
    while (count <= iterr) :
        rx, ry = newton_raphson_2D(r, s)
        print (count, round(rx, 4) ,round(ry, 4))
        r = rx
        s = ry
        count += 1
        
        
# This can be run using compute(1.2, 1.3, 5)
